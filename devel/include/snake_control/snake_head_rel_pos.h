// Generated by gencpp from file snake_control/snake_head_rel_pos.msg
// DO NOT EDIT!


#ifndef SNAKE_CONTROL_MESSAGE_SNAKE_HEAD_REL_POS_H
#define SNAKE_CONTROL_MESSAGE_SNAKE_HEAD_REL_POS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snake_control
{
template <class ContainerAllocator>
struct snake_head_rel_pos_
{
  typedef snake_head_rel_pos_<ContainerAllocator> Type;

  snake_head_rel_pos_()
    : x_rel(0.0)
    , y_rel(0.0)  {
    }
  snake_head_rel_pos_(const ContainerAllocator& _alloc)
    : x_rel(0.0)
    , y_rel(0.0)  {
  (void)_alloc;
    }



   typedef double _x_rel_type;
  _x_rel_type x_rel;

   typedef double _y_rel_type;
  _y_rel_type y_rel;





  typedef boost::shared_ptr< ::snake_control::snake_head_rel_pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snake_control::snake_head_rel_pos_<ContainerAllocator> const> ConstPtr;

}; // struct snake_head_rel_pos_

typedef ::snake_control::snake_head_rel_pos_<std::allocator<void> > snake_head_rel_pos;

typedef boost::shared_ptr< ::snake_control::snake_head_rel_pos > snake_head_rel_posPtr;
typedef boost::shared_ptr< ::snake_control::snake_head_rel_pos const> snake_head_rel_posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snake_control::snake_head_rel_pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snake_control::snake_head_rel_pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace snake_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'snake_control': ['/home/paul/snake_ws/src/snake_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::snake_control::snake_head_rel_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_control::snake_head_rel_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snake_control::snake_head_rel_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snake_control::snake_head_rel_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_control::snake_head_rel_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_control::snake_head_rel_pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snake_control::snake_head_rel_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deda16f7231e7eaf16efd16c6f2840d9";
  }

  static const char* value(const ::snake_control::snake_head_rel_pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdeda16f7231e7eafULL;
  static const uint64_t static_value2 = 0x16efd16c6f2840d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::snake_control::snake_head_rel_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snake_control/snake_head_rel_pos";
  }

  static const char* value(const ::snake_control::snake_head_rel_pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snake_control::snake_head_rel_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_rel\n\
float64 y_rel\n\
";
  }

  static const char* value(const ::snake_control::snake_head_rel_pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snake_control::snake_head_rel_pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_rel);
      stream.next(m.y_rel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct snake_head_rel_pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snake_control::snake_head_rel_pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snake_control::snake_head_rel_pos_<ContainerAllocator>& v)
  {
    s << indent << "x_rel: ";
    Printer<double>::stream(s, indent + "  ", v.x_rel);
    s << indent << "y_rel: ";
    Printer<double>::stream(s, indent + "  ", v.y_rel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKE_CONTROL_MESSAGE_SNAKE_HEAD_REL_POS_H
